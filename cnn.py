# -*- coding: utf-8 -*-
"""CNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sf4MtGHgHLLOJrFcm5bncxngAsF5ZwMB

### **MNIST Handwritten Digits Dataset - Tasks (Using CNN)**

1. **Load the Dataset:**
   - Load the MNIST dataset and normalize the pixel values to the range 0-1.
   - Reshape the data to have a shape of `(28, 28, 1)` to match the input format for CNNs.

2. **Build a CNN Model:**
   - **Input Layer:** Accepts images of shape `(28, 28, 1)`.
   - **Convolutional Layer 1:** 32 filters, kernel size `(3, 3)`, ReLU activation.
   - **MaxPooling Layer 1:** Pool size `(2, 2)`.
   - **Convolutional Layer 2:** 64 filters, kernel size `(3, 3)`, ReLU activation.
   - **MaxPooling Layer 2:** Pool size `(2, 2)`.
   - **Flatten Layer:** Flattens the feature maps into a 1D vector.
   - **Dense Hidden Layer:** 128 neurons with ReLU activation.
   - **Output Layer:** 10 neurons with softmax activation.

3. **Compile the Model:**
   - Use the Adam optimizer, categorical crossentropy as the loss function, and accuracy as a metric.

4. **Train the Model:**
   - Train the model on the training dataset for 10 epochs with a batch size of 32.

5. **Evaluate the Model:**
   - Evaluate the model on the test dataset and report the test accuracy.

6. **Predict on Test Samples:**
   - Use the trained model to predict the classes for 5 random test samples.
   - Display the images with their predicted and actual labels.

7. **Calculate Metrics:**
   - Compute precision, recall, and F1-score for each class using the test dataset.
   - Include these metrics in the evaluation report.

8. **Save and Reload the Model:**
   - Save the trained model to a file.
   - Reload the model and use it for predictions on new data.
"""

import numpy as np
import tensorflow as tf
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report

# Load the dataset
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Normalize pixel values to the range 0-1
x_train = x_train.astype('float32') / 255.0
x_test = x_test.astype('float32') / 255.0

# Reshape to add channel dimension
x_train = x_train.reshape(-1, 28, 28, 1)
x_test = x_test.reshape(-1, 28, 28, 1)

# One-hot encode the labels
y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

"""###*Building the CNN Model*"""

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

model = Sequential([
    # Input Layer and Convolutional Layer 1
    Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    MaxPooling2D((2, 2)),

    # Convolutional Layer 2
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),

    # Flatten and Dense Layers
    Flatten(),
    Dense(128, activation='relu'),
    Dense(10, activation='softmax')  # Output layer
])

"""###*Compiling the Model*"""

model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

"""###*Training the Model*"""

history = model.fit(x_train, y_train,
                    epochs=10,
                    batch_size=32,
                    validation_split=0.1)

"""###*Evaluating the Model*"""

test_loss, test_accuracy = model.evaluate(x_test, y_test, verbose=0)
print(f"Test Accuracy: {test_accuracy * 100:.2f}%")

"""###*Predicting on Test Samples*"""

# Predict on 5 random test samples
indices = np.random.choice(x_test.shape[0], 5, replace=False)
predictions = model.predict(x_test[indices])

for i, idx in enumerate(indices):
    plt.imshow(x_test[idx].squeeze(), cmap='gray')
    plt.title(f"Predicted: {np.argmax(predictions[i])}, Actual: {np.argmax(y_test[idx])}")
    plt.show()

"""###*Calculating Metrics*"""

y_pred = model.predict(x_test)
y_pred_classes = np.argmax(y_pred, axis=1)
y_true_classes = np.argmax(y_test, axis=1)

print(classification_report(y_true_classes, y_pred_classes))

"""###*Save and Reload the Model*"""

# Save the model in the new format
model.save('mnist_cnn_model.keras')

# Reload the model
from tensorflow.keras.models import load_model
loaded_model = load_model('mnist_cnn_model.keras')

# Evaluate the reloaded model
reloaded_test_loss, reloaded_test_accuracy = loaded_model.evaluate(x_test, y_test, verbose=0)
print(f"Reloaded Model Test Accuracy: {reloaded_test_accuracy * 100:.2f}%")

